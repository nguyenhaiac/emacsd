#+TITLE: Emacs configuration file
#+AUTHOR: Nguyen Tien Hai
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

* Initialize the configuration
** Tangle & byte compile

Tangle and byte compile

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my--tangle-byte-compile-org ()
 "Tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)
     (byte-recompile-directory (expand-file-name user-emacs-directory) 0)))
#+END_SRC
Tangle

#+BEGIN_SRC emacs-lisp 
(defun my--tangle-org ()
 "Tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)))
(add-hook 'after-save-hook #'my--tangle-org)
#+END_SRC

** Bootstrap straight.el
*** Install straight.el if not yet
#+BEGIN_SRC emacs-lisp 
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
*** Install use-package and set it to use straight by default
#+BEGIN_SRC emacs-lisp  
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(straight-use-package 'org-plus-contrib)
(require 'org-tempo)
#+END_SRC
** Neccessary sane defaul

#+BEGIN_SRC emacs-lisp 
  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper)
  (server-mode t)
  (setq-default cursor-type 'bar)
  (use-package nimbus-theme)
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq create-lockfiles nil)  ; stop creating .# files
  (global-auto-revert-mode t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (transient-mark-mode 1)
  (delete-selection-mode 1)
  (global-hl-line-mode 0)
  (add-hook 'org-capture-mode-hook #'visual-line-mode)
  (global-display-line-numbers-mode)
  (setq
   cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows
   inhibit-splash-screen t
   default-frame-alist '((font . "Fira Mono for Powerline-12"))
   display-line-numbers-type 'relative
   echo-keystrokes 0.1               ; Show keystrokes right away, don't show the message in the scratch buffe
   initial-scratch-message nil       ; Empty scratch buffer
   initial-major-mode 'org-mode      ; org mode by default
   sentence-end-double-space nil     ; Sentences should end in one space, come on!
   confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
  )
  (fset 'yes-or-no-p 'y-or-n-p)      ; y and n instead of yes and no everywhere else
  (setq scroll-margin 10
     scroll-step 1
     next-line-add-newlines nil
     scroll-conservatively 10000
     scroll-preserve-screen-position 1)
  (setq mouse-wheel-follow-mouse 't)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq custom-safe-themes t)
  (modify-syntax-entry ?_ "w")
#+END_SRC
** Proxy setting
#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)
  (setq url-proxy-services '((("no_proxy"
        . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
            ("http"     . "access614.cws.sco.cisco.com:8080")
          ("https"    . "access614.cws.sco.cisco.com:8080"))))
#+end_src
* Utilities setup
** ivy and counsel bundle

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
    '((swiper . ivy--regex-plus)
     (t      . ivy--regex-fuzzy))))
  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode 1))
  (use-package smex)
  (use-package flx)
  (use-package avy)
#+END_SRC

** Helm 
#+begin_src emacs-lisp
  (use-package helm)
#+end_src
** Auto-completion with company-mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
      :config
      (setq company-idle-delay 0.0
	    company-minimum-prefix-length 1)
      (global-company-mode))
#+END_SRC

** Initialize general keybindings

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-create-definer my-leader-def :prefix "SPC")
    (general-create-definer my-local-leader-def :prefix ","))
#+END_SRC
** Project management with projectile
** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode 1)
    (global-set-key (kbd "C-z") 'undo)
    (defalias 'redo 'undo-tree-redo)
    (global-set-key (kbd "C-S-z") 'redo))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package projectile
    :config
    (projectile-mode 1)
    (setq projectile-completion-system 'ivy)
    (general-define-key :keymaps 'projectile-mode-map
    "H-x p" 'projectile-command-map))
#+END_SRC
** Origami fold
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :config
    (global-origami-mode t))
#+END_SRC
** Aesthetic config
*** Doom mode line
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-project-detection 'project
	  doom-modeline-major-mode-icon t
	  doom-modeline-env-enable-python t
	  doom-modeline-env-python-executable "python"
	  ))
#+END_SRC
*** Doom themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t))
    (load-theme 'doom-one t)
#+END_SRC
*** Modeline spaceline
    #+begin_src emacs-lisp 
      (use-package spaceline
	:config
	(require 'spaceline-config)
	(spaceline-emacs-theme))
    #+end_src
*** All the icon
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
** Posframe and ivy-posframe
   #+begin_src emacs-lisp :tangle no
     (use-package posframe)
     (use-package ivy-posframe
       :config
       ;;(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
       (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))
       ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
       ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
       ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
       ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
       (ivy-posframe-mode 1))
   #+end_src
** Company Posframe
   #+begin_src emacs-lisp :tangle no
     (use-package company-posframe
       :config
       (company-posframe-mode t))
   #+end_src
** Whichkey
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** Deadgrep
#+begin_src emacs-lisp
  (use-package deadgrep
    :config
    (global-set-key (kbd "<f5>") #'deadgrep))
#+end_src
** Org-helm-rifle
#+begin_src emacs-lisp
  (use-package helm-org-rifle)
  (defun hai/helm-org-rifle-archives ()
    "Rifle through Archives folder"
    (interactive)
    (helm-org-rifle-directories "~/Dropbox/orggtd/"))
#+end_src
** Elfeed
  #+begin_src emacs-lisp
    (use-package elfeed
      :config
      (global-set-key (kbd "C-x w") 'elfeed)
      (setq elfeed-feeds
                '(("https://realpython.com/atom.xml" python)
                  ("https://planetpython.org/rss20.xml" python planetpython)
                  ("https://lukesmith.xyz/rss.xml" linux)
                  ("https://planet.emacslife.com/atom.xml" emacs)
                  ("https://rahmonov.me/feeds/atom.xml" python)
                  ("https://blog.pythonanywhere.com/feed/" python)
                  ("https://lucumr.pocoo.org/feed.atom" python)
                  ("https://pbpython.com/feeds/all.atom.xml" python)
                  )))
  #+end_src

** Deft and zettledeft
  #+begin_src emacs-lisp
    (use-package deft
      :defer t
      :commands (deft)
      :general
      (general-define-key
       "H-d d" 'deft
       "H-d n" 'zetteldeft-new-file
       "H-d N" 'zetteldeft-new-file-and-link
       "H-d r" 'zetteldeft-file-rename
       "H-d s" 'zetteldeft-search-at-point
       "H-d c" 'zetteldeft-search-current-id
       "H-d f" 'zetteldeft-follow-link
       "H-d F" 'zetteldeft-avy-file-search-ace-window
       "H-d l" 'zetteldeft-avy-link-search
       "H-d t" 'zetteldeft-avy-tag-search
       "H-d T" 'zetteldeft-tag-buffer
       "H-d i" 'zetteldeft-find-file-id-insert
       "H-d I" 'zetteldeft-find-file-full-title-insert
       "H-d o" 'zetteldeft-find-file
       )
      :init (setq deft-directory "~/Dropbox/Archives"
                        deft-text-mode 'org-mode
                        deft-extensions '("org")
                        deft-recursive t
                        deft-use-filename-as-title nil))
    (setq deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . downcase)))
    (setq deft-org-mode-title-prefix t)
  #+end_src
#+begin_src emacs-lisp
  (use-package zetteldeft
    :straight (zetteldeft :type git :host github :repo "EFLS/zetteldeft"))
#+end_src
*** org-web-tools
#+begin_src emacs-lisp
  (use-package org-web-tools)
#+end_src
** graphviz mode
Of course to use this. you have to install graphviz program on you pc. Add it to path if you still cannot run it
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)
#+end_src
** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode)
    (require 'smartparens-config))

  (general-define-key
   :keymaps 'smartparens-mode-map
   "C-M-f" 'sp-forward-sexp
   "C-M-b" 'sp-backward-sexp
   "C-M-u" 'sp-unwrap-sexp
   )

  (sp-pair "(" ")" :wrap "C-("
           :pre-handlers '(my-add-space-before-sexp-insertion)
           :post-handlers '(my-add-space-after-sexp-insertion))
  (sp-pair "{" "}" :wrap "H-{"
           :pre-handlers '(my-add-space-before-sexp-insertion)
           :post-handlers '(my-add-space-after-sexp-insertion))
  (sp-pair "[" "]" :wrap "H-["
           :pre-handlers '(my-add-space-before-sexp-insertion)
           :post-handlers '(my-add-space-after-sexp-insertion))
#+end_src
** hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src
*** Some useful hydra
**** Orgclock timer
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-c w")
  (defhydra hydra-org-clock (:color blue :hint nil)
     "
  Clock   In/out^     ^Edit^   ^Summary     (_?_)
  -----------------------------------------
          _i_n         _e_dit   _g_oto entry
          _c_ontinue   _q_uit   _d_isplay
          _o_ut        ^ ^      _r_eport
        "
     ("i" org-clock-in)
     ("o" org-clock-out)
     ("c" org-clock-in-last)
     ("e" org-clock-modify-effort-estimate)
     ("q" org-clock-cancel)
     ("g" org-clock-goto)
     ("d" org-clock-display)
     ("r" org-clock-report)
     ("?" (org-info "Clocking commands"))))
#+end_src
**** Smartparens
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-M-s")
  (defhydra hydra-smartparens (:hint nil)
    "
   Moving^^^^                       Slurp & Barf^^   Wrapping^^            Sexp juggling^^^^               Destructive
  ------------------------------------------------------------------------------------------------------------------------
   [_a_] beginning  [_n_] down      [_h_] bw slurp   [_R_]   rewrap        [_S_] split   [_t_] transpose   [_c_] change inner  [_w_] copy
   [_e_] end        [_N_] bw down   [_H_] bw barf    [_u_]   unwrap        [_s_] splice  [_A_] absorb      [_C_] change outer
   [_f_] forward    [_p_] up        [_l_] slurp      [_U_]   bw unwrap     [_r_] raise   [_E_] emit        [_k_] kill          [_g_] quit
   [_b_] backward   [_P_] bw up     [_L_] barf       [_(__{__[_] wrap (){}[]   [_j_] join    [_o_] convolute   [_K_] bw kill       [_q_] quit"
    ;; Moving
    ("a" sp-beginning-of-sexp)
    ("e" sp-end-of-sexp)
    ("f" sp-forward-sexp)
    ("b" sp-backward-sexp)
    ("n" sp-down-sexp)
    ("N" sp-backward-down-sexp)
    ("p" sp-up-sexp)
    ("P" sp-backward-up-sexp)

    ;; Slurping & barfing
    ("h" sp-backward-slurp-sexp)
    ("H" sp-backward-barf-sexp)
    ("l" sp-forward-slurp-sexp)
    ("L" sp-forward-barf-sexp)

    ;; Wrapping
    ("R" sp-rewrap-sexp)
    ("u" sp-unwrap-sexp)
    ("U" sp-backward-unwrap-sexp)
    ("(" sp-wrap-round)
    ("{" sp-wrap-curly)
    ("[" sp-wrap-square)

    ;; Sexp juggling
    ("S" sp-split-sexp)
    ("s" sp-splice-sexp)
    ("r" sp-raise-sexp)
    ("j" sp-join-sexp)
    ("t" sp-transpose-sexp)
    ("A" sp-absorb-sexp)
    ("E" sp-emit-sexp)
    ("o" sp-convolute-sexp)

    ;; Destructive editing
    ("c" sp-change-inner :exit t)
    ("C" sp-change-enclosing :exit t)
    ("k" sp-kill-sexp)
    ("K" sp-backward-kill-sexp)
    ("w" sp-copy-sexp)

    ("q" nil)
    ("g" nil)))
#+end_src
**** Lsp mode
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l")
  (defhydra hydra-lsp (:exit t :hint nil)
    "
   Buffer^^               Server^^                   Symbol
  -------------------------------------------------------------------------------------
   [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
   [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
   [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
    ("d" lsp-find-declaration)
    ("D" lsp-ui-peek-find-definitions)
    ("R" lsp-ui-peek-find-references)
    ("i" lsp-ui-peek-find-implementation)
    ("t" lsp-find-type-definition)
    ("s" lsp-signature-help)
    ("o" lsp-describe-thing-at-point)
    ("r" lsp-rename)

    ("f" lsp-format-buffer)
    ("m" lsp-ui-imenu)
    ("x" lsp-execute-code-action)

    ("M-s" lsp-describe-session)
    ("M-r" lsp-restart-workspace)
    ("S" lsp-shutdown-workspace)))
#+end_src
**** Apropos commands
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a")
  (defhydra hydra-apropos (:color blue)
    "Apropos"
    ("a" apropos "apropos")
    ("c" apropos-command "cmd")
    ("d" apropos-documentation "doc")
    ("e" apropos-value "val")
    ("l" apropos-library "lib")
    ("o" apropos-user-option "option")
    ("u" apropos-user-option "option")
    ("v" apropos-variable "var")
    ("i" info-apropos "info")
    ("t" tags-apropos "tags")
    ("z" hydra-customize-apropos/body "customize")))
#+end_src
**** Transposing
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c m")
  (defhydra hydra-transpose (:color red)
  "Transpose"
   ("c" transpose-chars "characters")
   ("w" transpose-words "words")
   ("o" org-transpose-words "Org mode words")
   ("l" transpose-lines "lines")
   ("s" transpose-sentences "sentences")
   ("e" org-transpose-elements "Org mode elements")
   ("p" transpose-paragraphs "paragraphs")
   ("t" org-table-transpose-table-at-point "Org mode table")
   ("q" nil "cancel" :blue color)))
#+end_src
**** Rectangle operation
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r")
  (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                       :color pink
                                       :hint nil
                                       :post (deactivate-mark))
    "
    ^_u_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
  _n_   _i_     _y_ank        _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
    ^_e_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
  ^^^^          _U_ndo        _g_ quit     ^ ^                     '---''(./..)-'(_\_)
  "
   ("u" rectangle-previous-line)
   ("e" rectangle-next-line)
   ("n" rectangle-backward-char)
   ("i" rectangle-forward-char)
   ("d" kill-rectangle)                    ;; C-x r k
   ("y" yank-rectangle)                    ;; C-x r y
   ("w" copy-rectangle-as-kill)            ;; C-x r M-w
   ("o" open-rectangle)                    ;; C-x r o
   ("t" string-rectangle)                  ;; C-x r t
   ("c" clear-rectangle)                   ;; C-x r c
   ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
   ("N" rectangle-number-lines)            ;; C-x r N
   ("r" (if (region-active-p)
            (deactivate-mark)
          (rectangle-mark-mode 1)))
   ("U" undo nil)
   ("g" nil))      ;; ok
  )
#+end_src
* Org-mode config
** Org-mode helper function
#+BEGIN_SRC emacs-lisp
(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/skip-non-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-task-p)
        nil)
       (t
        next-headline)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))


(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))
#+END_SRC

** Default config for org-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-refile-use-outline-path 'file)
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-agenda-time-grid
        (quote
         ((daily today remove-match)
          (900 1100 1300 1500 1700)
          "......" "----------------")))
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))

#+END_SRC
*** Agenda setup
#+BEGIN_SRC emacs-lisp
(require 'org-habit)
(setq spacemacs-theme-org-agenda-height nil
      org-agenda-start-day "-1d"
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t)
#+END_SRC
*** Habit and clocking
#+BEGIN_SRC emacs-lisp
(setq  org-habit-following-days 7
       org-habit-preceding-days 10
       org-habit-show-habits-only-for-today t)
(setq org-agenda-tags-column -102)
(setq org-habit-graph-column 50)
(setq org-clock-out-remove-zero-time-clocks t)
(setq org-clock-out-when-done t)
(setq org-clock-persist t)
#+END_SRC
** Org-todo-keywords
#+BEGIN_SRC emacs-lisp
  (custom-declare-face '+org-todo-active '((t (:inherit (bold font-lock-constant-face org-todo)))) "")
  (custom-declare-face '+org-todo-project '((t (:inherit (bold font-lock-doc-face org-todo)))) "")
  (custom-declare-face '+org-todo-onhold '((t (:inherit (bold warning org-todo)))) "")
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"  ; A task that needs doing & is ready to do
           "NEXT(n)"
           "STRT(s)"  ; A task that is in progress
           "WAIT(w)"  ; Something is holding up this task; or it is paused
           "TOREAD(r)"
           "|"
           "DONE(d)"  ; Task successfully completed
           "PHONE(p)"
           "READ(R)"
           "MEETING(m)"
           "KILL(k)")))
#+END_SRC
*** Org-agenda config
** Org-super-agenda setting
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/Dropbox/orggtd/todo.org"))
  (use-package org-super-agenda
    :config
    (org-super-agenda-mode))
  (setq org-agenda-custom-commands
        '(("z" "Super zaen view"
           ((agenda "" ((org-agenda-span 3)
                        (org-super-agenda-groups
                         '((:name "Habit"
                                  :habit t)

                           (:name "Schedule"
                                  :time-grid t
                                  :scheduled t
                                  :order 2)
                           (:discard (:anything t))))))

            (alltodo "" ((org-agenda-overriding-header "Project Task")
                        (org-agenda-skip-function 'bh/skip-non-project-tasks)
                        (org-super-agenda-groups
                         '((:name none
                                   :todo t
                                   :order 1)))))

            (alltodo "" ((org-agenda-overriding-header "Active Project")
                         (org-super-agenda-groups
                          '((:name none
                                   :children "NEXT"
                                   :order 1)
                            (:discard (:anything t))))))

            (alltodo "" ((org-agenda-overriding-header "Next Task")
                         (org-super-agenda-groups
                          '((:name none
                                   :discard (:not (:todo "NEXT"))
                                   :discard (:habit)
                                   :order 1)
                            (:name none
                                   :todo "NEXT"
                                   :face (:background "" :underline t))
                            ))))

            (alltodo "" ((org-agenda-overriding-header "Doing")
                         (org-super-agenda-groups
                          '((:name none
                                   :discard (:not (:todo ("STRT" "[-]")))
                                   :discard (:habit)
                                   :order 1)
                            (:name none
                                   :todo t
                                   :face (:background "blue" :underline t))
                            ))))

            (alltodo "" ((org-agenda-overriding-header "Standalone Task")
                         (org-agenda-skip-function 'bh/skip-project-tasks)
                         (org-super-agenda-groups
                          '((:name none
                                   :todo ("TODO" "[ ]" "WAIT" "[?]")
                                   :order 1)
                            (:discard (:anything t))))))

            (alltodo "" ((org-agenda-overriding-header "Stuck Project")
                         (org-super-agenda-groups
                          '((:name none
                                   :discard (:children "NEXT")
                                   :order 1)
                            (:name none
                                   :discard (:children nil)
                                   :order 1)
                            (:name none
                                   :children todo)))))
            ))
          ("b" "books" alltodo "" ((org-agenda-overriding-header "Books to read")
                                (org-super-agenda-groups
                                 '((:name none
                                          :todo "TOREAD")
                                   (:discard (:anything t))))))
          ))
#+END_SRC
** Org-capture

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        (quote (("t" "todo" entry (file+headline "~/Dropbox/orggtd/todo.org" "Inbox")
                 "* [ ] %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("n" "note" entry (file "~/Dropbox/orggtd/notes.org")
                 "* %? %^G :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("j" "Journal" entry (file+datetree "~/Dropbox/orggtd/journal.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("m" "Meeting" entry (file "~/Dropbox/orggtd/todo.org")
                 "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                ("r" "Reading list" entry (file+headline "~/Dropbox/orggtd/todo.org" "TOREAD")
                 "* TOREAD %?\n:PROPERTIES:\n:SERIES:\n:AUTHOR:\n:RATING:\n:ADDED:%U\n:END:")
                ("p" "Phone call" entry (file "~/Dropbox/orggtd/todo.org")
                 "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                ("h" "Habit" entry (file "~/Dropbox/orggtd/todo.org")
                 "* NEXT %?\nSCHEDULED: <%<%Y-%m-%d %a .+1d>>\n:PROPERTIES:\n:CREATED: %U\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:LOGGING: DONE(!)\n:ARCHIVE: %%s_archive::* Habits\n:END:\n%U\n"
                 ))))
#+END_SRC

** Org-babel setting
   #+begin_src emacs-lisp
          (org-babel-do-load-languages
           'org-babel-load-languages
           '((ruby . t)
             (dot . t)
             (groovy . t)
             (shell . t)
             (python . t)
             (emacs-lisp . t)
             (matlab . t)
             (latex . t)
             (C . t)
             (J . t)
             (java . t)
             (scheme . t)
             (lisp . t)
             (latex . t)
             (R . t)
             (sql . t)
             (calc . t)))

          (eval-when-compile
            (require 'ob-C)
            (require 'ob-ruby)
            (require 'ob-python)
            (require 'ob-scheme)
            (require 'ob-clojure))
          (setq org-confirm-babel-evaluate nil)
   #+end_src

   #+RESULTS:

*** Org babel header
    #+begin_src emacs-lisp
      ;;* Python
      (setq org-babel-default-header-args:python
	    '((:results . "output")))
      (setq org-babel-python-command "python3")

      ;;* Bash
      (setq org-babel-default-header-args:sh
	    '((:results . "verbatim")))
      (setq org-babel-default-header-args:bash
	    '((:results . "verbatim")))

      (setq org-babel-default-header-args:C
	    '((:results . "org")
	      (:exports . "both")))
    #+end_src
** Navigation in org-mode
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'org-mode-map
   "H-n" 'org-next-visible-heading
   "H-p" 'org-previous-visible-heading
   "H-f" 'org-forward-heading-same-level
   "H-b" 'org-backward-heading-same-level
   )
#+end_src
** launch agenda
#+begin_src emacs-lisp
  (defun pop-to-org-agenda (&optional split)
    (interactive "P")
    (org-agenda nil "z")
    (when (not split)
      (delete-other-windows)))
#+end_src
* Programming setup
** Magit - the king of git
#+BEGIN_SRC emacs-lisp
 (use-package magit)
#+END_SRC
** Python with elpy
#+BEGIN_SRC emacs-lisp :tangle no
  use-package elpy
    :config
    (elpy-enable)
#+END_SRC
** Python debugging with realgud
#+BEGIN_SRC emacs-lisp
  (use-package realgud)
#+END_SRC
** Python with lsp mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook (prog-mode . lsp))
  (use-package company-lsp :commands company-lsp)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+end_src
** pyvenv
#+begin_src emacs-lisp
  (use-package pyvenv)
#+end_src
** C programming setup
   #+begin_src emacs-lisp
     (use-package company-irony
       :config
       (add-to-list 'company-backends 'company-irony))

     (use-package irony
       :hook ((c++-mode-hook . irony-mode)
	      (c-mode-hook . irony-mode)
	      (irony-mode-hook . irony-cdb-autosetup-compile-options)))
   #+end_src
** vterm
#+begin_src emacs-lisp :tangle yes
  (use-package vterm)

#+end_src
** rustic - rust mode for emacs
#+begin_src emacs-lisp
  (use-package rustic)
#+end_src
** yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src
* Keybindings for specific modes
** For windows movement
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'global
   "C-x [" 'previous-buffer
   "C-x ]" 'next-buffer
   )
  (use-package ace-window
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i))
    (defvar aw-dispatch-alist
    '((?x aw-delete-window "Delete Window")
	  (?w aw-swap-window "Swap Windows")
	  (?M aw-move-window "Move Window")
	  (?c aw-copy-window "Copy Window")
	  (?j aw-switch-buffer-in-window "Select Buffer")
	  (?f aw-flip-window)
	  (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	  (?c aw-split-window-fair "Split Fair Window")
	  (?v aw-split-window-vert "Split Vert Window")
	  (?b aw-split-window-horz "Split Horz Window")
	  (?o delete-other-windows "Delete Other Windows")
	  (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")
  )

#+END_SRC
** For orgmode navigation
#+begin_src emacs-lisp
  (general-define-key
   :keymap 'org-mode-map
   "H-n" 'org-next-visible-heading
   "H-p" 'org-previous-visible-heading
   "H-<" 'org-promote-subtree
   "H->" 'org-demote-subtree
   )
  (general-define-key
   :keymaps 'global
   "H-x o" 'pop-to-org-agenda
   "H-x c" 'org-capture
   "H-x n" '((lambda() (interactive)(org-capture nil "n")) :which-key "Taking notes")
   "H-x f" 'hai/helm-org-rifle-archives
   )
#+end_src
** Editting
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'global
   "M-p" 'move-line-up
   "M-n" 'move-line-down
   "H-c" 'copy-line
   )
#+END_SRC

* Helper function for editting
#+BEGIN_SRC emacs-lisp
  (defmacro save-column (&rest body)
    `(let ((column (current-column)))
       (unwind-protect
	   (progn ,@body)
	 (move-to-column column))))
  (put 'save-column 'lisp-indent-function 0)

  (defun move-line-up ()
    (interactive)
    (save-column
      (transpose-lines 1)
      (forward-line -2)))

  (defun move-line-down ()
    (interactive)
    (save-column
      (forward-line 1)
      (transpose-lines 1)
      (forward-line -1)))
#+END_SRC
** Copy whole line 
#+BEGIN_SRC emacs-lisp
   (defun copy-line (arg)
      "Copy lines (as many as prefix argument) in the kill ring.
	Ease of use features:
	- Move to start of next line.
	- Appends the copy on sequential calls.
	- Use newline as last char even on the last line of the buffer.
	- If region is active, copy its lines."
      (interactive "p")
      (let ((beg (line-beginning-position))
	    (end (line-end-position arg)))
	(when mark-active
	  (if (> (point) (mark))
	      (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
	    (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
	(if (eq last-command 'copy-line)
	    (kill-append (buffer-substring beg end) (< end beg))
	  (kill-ring-save beg end)))
      (kill-append "\n" nil)
      (beginning-of-line (or (and arg (1+ arg)) 2))
      (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))
#+END_SRC
* Better default
#+begin_src emacs-lisp
  (use-package better-defaults)
#+end_src
